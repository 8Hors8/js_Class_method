(()=>{"use strict";const e=["Bowman","Swordsman","Magician","Daemon","Undead","Zombie"];class s{constructor(s,t,o,l){if("string"!=typeof s||s.length<2||s.length>10)throw new Error("Имя должно быть строкой длиной от 2 до 10 символов");const n=t.charAt(0).toUpperCase()+t.slice(1).toLowerCase();if(!e.includes(n))throw new Error("Неверный тип персонажа");this.name=s,this.type=n,this.health=100,this.level=1,this.attack=o,this.defence=l}levelUp(){if(0===this.health)throw new Error("нельзя повысить левел умершего");this.level+=1,this.attack=+(1.2*this.attack).toFixed(1),this.defence=+(1.2*this.defence).toFixed(1),this.health=100}damage(e){if(0===this.health)return;const s=e*(1-this.defence/100);this.health-=s,this.health<0&&(this.health=0)}}const t=new class extends s{constructor(e){super(e,"Bowman",25,25)}}("Legolas"),o=new class extends s{constructor(e){super(e,"Swordsman",40,10)}}("Arthur"),l=new class extends s{constructor(e){super(e,"Magician",10,40)}}("Merlin"),n=new class extends s{constructor(e){super(e,"Daemon",10,40)}}("Azazel"),a=new class extends s{constructor(e){super(e,"Zombie",40,10)}}("Rotten"),c=new class extends s{constructor(e){super(e,"Undead",25,25)}}("Dracula");console.log(t),console.log(o),console.log(l),console.log(n),console.log(a),console.log(c),console.log("До levelUp:",t),t.levelUp(),console.log("После levelUp:",t),t.damage(50),console.log("После damage(50):",t),t.damage(200),console.log("После damage(200):",t),t.health=0;try{t.levelUp()}catch(e){console.log("Ошибка при levelUp у умершего:",e.message)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwibWFwcGluZ3MiOiJtQkFBQSxNQUFNQSxFQUFhLENBQ2pCLFNBQ0EsWUFDQSxXQUNBLFNBQ0EsU0FDQSxVQUdGLE1BQU1DLEVBQ0osV0FBQUMsQ0FBWUMsRUFBTUMsRUFBTUMsRUFBUUMsR0FDOUIsR0FBb0IsaUJBQVRILEdBQXFCQSxFQUFLSSxPQUFTLEdBQUtKLEVBQUtJLE9BQVMsR0FDL0QsTUFBTSxJQUFJQyxNQUFNLHNEQUVsQixNQUFNQyxFQUNKTCxFQUFLTSxPQUFPLEdBQUdDLGNBQWdCUCxFQUFLUSxNQUFNLEdBQUdDLGNBRS9DLElBQUtiLEVBQVdjLFNBQVNMLEdBQ3ZCLE1BQU0sSUFBSUQsTUFBTSwwQkFHbEJPLEtBQUtaLEtBQU9BLEVBQ1pZLEtBQUtYLEtBQU9LLEVBQ1pNLEtBQUtDLE9BQVMsSUFDZEQsS0FBS0UsTUFBUSxFQUNiRixLQUFLVixPQUFTQSxFQUNkVSxLQUFLVCxRQUFVQSxDQUNqQixDQUVBLE9BQUFZLEdBQ0UsR0FBb0IsSUFBaEJILEtBQUtDLE9BQ1AsTUFBTSxJQUFJUixNQUFNLGtDQUVsQk8sS0FBS0UsT0FBUyxFQUNkRixLQUFLVixTQUF5QixJQUFkVSxLQUFLVixRQUFjYyxRQUFRLEdBQzNDSixLQUFLVCxVQUEyQixJQUFmUyxLQUFLVCxTQUFlYSxRQUFRLEdBQzdDSixLQUFLQyxPQUFTLEdBQ2hCLENBRUEsTUFBQUksQ0FBT0MsR0FDTCxHQUFvQixJQUFoQk4sS0FBS0MsT0FBYyxPQUN2QixNQUFNTSxFQUFlRCxHQUFVLEVBQUlOLEtBQUtULFFBQVUsS0FDbERTLEtBQUtDLFFBQVVNLEVBQ1hQLEtBQUtDLE9BQVMsSUFDaEJELEtBQUtDLE9BQVMsRUFFbEIsRUF1Q0YsTUFBTU8sRUFBUyxJQXBDZixjQUFxQnRCLEVBQ25CLFdBQUFDLENBQVlDLEdBQ1ZxQixNQUFNckIsRUFBTSxTQUFVLEdBQUksR0FDNUIsR0FpQ3dCLFdBQ3BCc0IsRUFBVSxJQS9CaEIsY0FBd0J4QixFQUN0QixXQUFBQyxDQUFZQyxHQUNWcUIsTUFBTXJCLEVBQU0sWUFBYSxHQUFJLEdBQy9CLEdBNEI0QixVQUN4QnVCLEVBQU8sSUExQmIsY0FBdUJ6QixFQUNyQixXQUFBQyxDQUFZQyxHQUNWcUIsTUFBTXJCLEVBQU0sV0FBWSxHQUFJLEdBQzlCLEdBdUJ3QixVQUNwQndCLEVBQVEsSUFyQmQsY0FBcUIxQixFQUNuQixXQUFBQyxDQUFZQyxHQUNWcUIsTUFBTXJCLEVBQU0sU0FBVSxHQUFJLEdBQzVCLEdBa0J1QixVQUNuQnlCLEVBQVMsSUFoQmYsY0FBcUIzQixFQUNuQixXQUFBQyxDQUFZQyxHQUNWcUIsTUFBTXJCLEVBQU0sU0FBVSxHQUFJLEdBQzVCLEdBYXdCLFVBQ3BCMEIsRUFBUyxJQVhmLGNBQXFCNUIsRUFDbkIsV0FBQUMsQ0FBWUMsR0FDVnFCLE1BQU1yQixFQUFNLFNBQVUsR0FBSSxHQUM1QixHQVF3QixXQUUxQjJCLFFBQVFDLElBQUlSLEdBQ1pPLFFBQVFDLElBQUlOLEdBQ1pLLFFBQVFDLElBQUlMLEdBQ1pJLFFBQVFDLElBQUlKLEdBQ1pHLFFBQVFDLElBQUlILEdBQ1pFLFFBQVFDLElBQUlGLEdBRVpDLFFBQVFDLElBQUksY0FBZVIsR0FDM0JBLEVBQU9MLFVBQ1BZLFFBQVFDLElBQUksaUJBQWtCUixHQUU5QkEsRUFBT0gsT0FBTyxJQUNkVSxRQUFRQyxJQUFJLG9CQUFxQlIsR0FFakNBLEVBQU9ILE9BQU8sS0FDZFUsUUFBUUMsSUFBSSxxQkFBc0JSLEdBR2xDQSxFQUFPUCxPQUFTLEVBQ2hCLElBQ0VPLEVBQU9MLFNBQ1QsQ0FBRSxNQUFPYyxHQUNQRixRQUFRQyxJQUFJLGlDQUFrQ0MsRUFBRUMsUUFDbEQsQyIsInNvdXJjZXMiOlsid2VicGFjazovL2dlbWVfbWV0aG9kLy4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHZhbGlkVHlwZXMgPSBbXHJcbiAgXCJCb3dtYW5cIixcclxuICBcIlN3b3Jkc21hblwiLFxyXG4gIFwiTWFnaWNpYW5cIixcclxuICBcIkRhZW1vblwiLFxyXG4gIFwiVW5kZWFkXCIsXHJcbiAgXCJab21iaWVcIixcclxuXTtcclxuXHJcbmNsYXNzIENoYXJhY3RlcnMge1xyXG4gIGNvbnN0cnVjdG9yKG5hbWUsIHR5cGUsIGF0dGFjaywgZGVmZW5jZSkge1xyXG4gICAgaWYgKHR5cGVvZiBuYW1lICE9PSBcInN0cmluZ1wiIHx8IG5hbWUubGVuZ3RoIDwgMiB8fCBuYW1lLmxlbmd0aCA+IDEwKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcItCY0LzRjyDQtNC+0LvQttC90L4g0LHRi9GC0Ywg0YHRgtGA0L7QutC+0Lkg0LTQu9C40L3QvtC5INC+0YIgMiDQtNC+IDEwINGB0LjQvNCy0L7Qu9C+0LJcIik7XHJcbiAgICB9XHJcbiAgICBjb25zdCBub3JtYWxpemVkVHlwZSA9XHJcbiAgICAgIHR5cGUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB0eXBlLnNsaWNlKDEpLnRvTG93ZXJDYXNlKCk7XHJcblxyXG4gICAgaWYgKCF2YWxpZFR5cGVzLmluY2x1ZGVzKG5vcm1hbGl6ZWRUeXBlKSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCLQndC10LLQtdGA0L3Ri9C5INGC0LjQvyDQv9C10YDRgdC+0L3QsNC20LBcIik7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgIHRoaXMudHlwZSA9IG5vcm1hbGl6ZWRUeXBlO1xyXG4gICAgdGhpcy5oZWFsdGggPSAxMDA7XHJcbiAgICB0aGlzLmxldmVsID0gMTtcclxuICAgIHRoaXMuYXR0YWNrID0gYXR0YWNrO1xyXG4gICAgdGhpcy5kZWZlbmNlID0gZGVmZW5jZTtcclxuICB9XHJcblxyXG4gIGxldmVsVXAoKSB7XHJcbiAgICBpZiAodGhpcy5oZWFsdGggPT09IDApIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwi0L3QtdC70YzQt9GPINC/0L7QstGL0YHQuNGC0Ywg0LvQtdCy0LXQuyDRg9C80LXRgNGI0LXQs9C+XCIpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5sZXZlbCArPSAxO1xyXG4gICAgdGhpcy5hdHRhY2sgPSArKHRoaXMuYXR0YWNrICogMS4yKS50b0ZpeGVkKDEpO1xyXG4gICAgdGhpcy5kZWZlbmNlID0gKyh0aGlzLmRlZmVuY2UgKiAxLjIpLnRvRml4ZWQoMSk7XHJcbiAgICB0aGlzLmhlYWx0aCA9IDEwMDtcclxuICB9XHJcblxyXG4gIGRhbWFnZShwb2ludHMpIHtcclxuICAgIGlmICh0aGlzLmhlYWx0aCA9PT0gMCkgcmV0dXJuO1xyXG4gICAgY29uc3QgZGFtYWdlUG9pbnRzID0gcG9pbnRzICogKDEgLSB0aGlzLmRlZmVuY2UgLyAxMDApO1xyXG4gICAgdGhpcy5oZWFsdGggLT0gZGFtYWdlUG9pbnRzO1xyXG4gICAgaWYgKHRoaXMuaGVhbHRoIDwgMCkge1xyXG4gICAgICB0aGlzLmhlYWx0aCA9IDA7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5jbGFzcyBCb3dtYW4gZXh0ZW5kcyBDaGFyYWN0ZXJzIHtcclxuICBjb25zdHJ1Y3RvcihuYW1lKSB7XHJcbiAgICBzdXBlcihuYW1lLCBcIkJvd21hblwiLCAyNSwgMjUpO1xyXG4gIH1cclxufVxyXG5cclxuY2xhc3MgU3dvcmRzbWFuIGV4dGVuZHMgQ2hhcmFjdGVycyB7XHJcbiAgY29uc3RydWN0b3IobmFtZSkge1xyXG4gICAgc3VwZXIobmFtZSwgXCJTd29yZHNtYW5cIiwgNDAsIDEwKTtcclxuICB9XHJcbn1cclxuXHJcbmNsYXNzIE1hZ2ljaWFuIGV4dGVuZHMgQ2hhcmFjdGVycyB7XHJcbiAgY29uc3RydWN0b3IobmFtZSkge1xyXG4gICAgc3VwZXIobmFtZSwgXCJNYWdpY2lhblwiLCAxMCwgNDApO1xyXG4gIH1cclxufVxyXG5cclxuY2xhc3MgRGFlbW9uIGV4dGVuZHMgQ2hhcmFjdGVycyB7XHJcbiAgY29uc3RydWN0b3IobmFtZSkge1xyXG4gICAgc3VwZXIobmFtZSwgXCJEYWVtb25cIiwgMTAsIDQwKTtcclxuICB9XHJcbn1cclxuXHJcbmNsYXNzIFpvbWJpZSBleHRlbmRzIENoYXJhY3RlcnMge1xyXG4gIGNvbnN0cnVjdG9yKG5hbWUpIHtcclxuICAgIHN1cGVyKG5hbWUsIFwiWm9tYmllXCIsIDQwLCAxMCk7XHJcbiAgfVxyXG59XHJcblxyXG5jbGFzcyBVbmRlYWQgZXh0ZW5kcyBDaGFyYWN0ZXJzIHtcclxuICBjb25zdHJ1Y3RvcihuYW1lKSB7XHJcbiAgICBzdXBlcihuYW1lLCBcIlVuZGVhZFwiLCAyNSwgMjUpO1xyXG4gIH1cclxufVxyXG5cclxuY29uc3QgYXJjaGVyID0gbmV3IEJvd21hbihcIkxlZ29sYXNcIik7XHJcbmNvbnN0IHdhcnJpb3IgPSBuZXcgU3dvcmRzbWFuKFwiQXJ0aHVyXCIpO1xyXG5jb25zdCBtYWdlID0gbmV3IE1hZ2ljaWFuKFwiTWVybGluXCIpO1xyXG5jb25zdCBkZW1vbiA9IG5ldyBEYWVtb24oXCJBemF6ZWxcIik7XHJcbmNvbnN0IHpvbWJpZSA9IG5ldyBab21iaWUoXCJSb3R0ZW5cIik7XHJcbmNvbnN0IHVuZGVhZCA9IG5ldyBVbmRlYWQoXCJEcmFjdWxhXCIpO1xyXG5cclxuY29uc29sZS5sb2coYXJjaGVyKTtcclxuY29uc29sZS5sb2cod2Fycmlvcik7XHJcbmNvbnNvbGUubG9nKG1hZ2UpO1xyXG5jb25zb2xlLmxvZyhkZW1vbik7XHJcbmNvbnNvbGUubG9nKHpvbWJpZSk7XHJcbmNvbnNvbGUubG9nKHVuZGVhZCk7XHJcblxyXG5jb25zb2xlLmxvZyhcItCU0L4gbGV2ZWxVcDpcIiwgYXJjaGVyKTtcclxuYXJjaGVyLmxldmVsVXAoKTtcclxuY29uc29sZS5sb2coXCLQn9C+0YHQu9C1IGxldmVsVXA6XCIsIGFyY2hlcik7XHJcblxyXG5hcmNoZXIuZGFtYWdlKDUwKTtcclxuY29uc29sZS5sb2coXCLQn9C+0YHQu9C1IGRhbWFnZSg1MCk6XCIsIGFyY2hlcik7XHJcblxyXG5hcmNoZXIuZGFtYWdlKDIwMCk7IC8vINC00L7Qu9C20L3QsCDRg9C80LXQvdGM0YjQuNGC0Ywg0LfQtNC+0YDQvtCy0YzQtSDQtNC+IDAsINC90L4g0L3QtSDQvdC40LbQtVxyXG5jb25zb2xlLmxvZyhcItCf0L7RgdC70LUgZGFtYWdlKDIwMCk6XCIsIGFyY2hlcik7XHJcblxyXG4vLyDQn9GA0L7QstC10YDQutCwINC+0YjQuNCx0LrQuCDQv9GA0LggbGV2ZWxVcCDRgyDQvNGR0YDRgtCy0L7Qs9C+INC/0LXRgNGB0L7QvdCw0LbQsFxyXG5hcmNoZXIuaGVhbHRoID0gMDtcclxudHJ5IHtcclxuICBhcmNoZXIubGV2ZWxVcCgpO1xyXG59IGNhdGNoIChlKSB7XHJcbiAgY29uc29sZS5sb2coXCLQntGI0LjQsdC60LAg0L/RgNC4IGxldmVsVXAg0YMg0YPQvNC10YDRiNC10LPQvjpcIiwgZS5tZXNzYWdlKTtcclxufVxyXG5cclxuZXhwb3J0IHsgQ2hhcmFjdGVycywgQm93bWFuLCBTd29yZHNtYW4sIE1hZ2ljaWFuLCBEYWVtb24sIFpvbWJpZSwgVW5kZWFkIH07XHJcbiJdLCJuYW1lcyI6WyJ2YWxpZFR5cGVzIiwiQ2hhcmFjdGVycyIsImNvbnN0cnVjdG9yIiwibmFtZSIsInR5cGUiLCJhdHRhY2siLCJkZWZlbmNlIiwibGVuZ3RoIiwiRXJyb3IiLCJub3JtYWxpemVkVHlwZSIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwic2xpY2UiLCJ0b0xvd2VyQ2FzZSIsImluY2x1ZGVzIiwidGhpcyIsImhlYWx0aCIsImxldmVsIiwibGV2ZWxVcCIsInRvRml4ZWQiLCJkYW1hZ2UiLCJwb2ludHMiLCJkYW1hZ2VQb2ludHMiLCJhcmNoZXIiLCJzdXBlciIsIndhcnJpb3IiLCJtYWdlIiwiZGVtb24iLCJ6b21iaWUiLCJ1bmRlYWQiLCJjb25zb2xlIiwibG9nIiwiZSIsIm1lc3NhZ2UiXSwic291cmNlUm9vdCI6IiJ9